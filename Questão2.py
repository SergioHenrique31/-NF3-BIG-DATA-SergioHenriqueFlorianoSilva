# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rbP2P-B-W1M3MNGHq6gJG4-z_oUbCNih

Questão 2
"""

#Exercicio A
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

colunas_notas = ['nota_integral_ampla', 'nota_integral_cotas', 'nota_parcial_ampla', 'nota_parcial_cotas']
tabela[colunas_notas] = tabela[colunas_notas].fillna(0.0)

media_notas_estado = tabela.groupby('uf_busca')[colunas_notas].mean()

print(media_notas_estado)

##Exercicio B
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

agrupado_por_grau = tabela.groupby('grau')

for grupo, dados in agrupado_por_grau:
    print("Grupo:", grupo)
    print(dados.head())
    print("\n")

##Exercicio C
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

cursos_interesse = ['Matemática', 'Medicina', 'Pedagogia']
filtro_cursos = tabela['curso_busca'].isin(cursos_interesse)
cursos_selecionados = tabela[filtro_cursos]

agrupado_por_curso = cursos_selecionados.groupby('curso_busca')

for grupo, dados in agrupado_por_curso:
    print("Curso:", grupo)
    print(dados.head())
    print("\n")

#Exercicio D
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

media_notas_estado = tabela.groupby('uf_busca')['nota_integral_ampla'].mean()

print(media_notas_estado)

#Exercicio E
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

filtro_tecnologicos = tabela['grau'] == 'Tecnológico'
cursos_tecnologicos = tabela[filtro_tecnologicos]

agrupado_por_curso = cursos_tecnologicos.groupby('curso_busca')

for grupo, dados in agrupado_por_curso:
    print("Curso:", grupo)
    print(dados.head())
    print("\n")

#Exercicio F
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

tabela = tabela.drop('cidade_filtro', axis=1)

print(tabela.head())

#Exercicio G
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

filtro_medicina = tabela['curso_busca'] == 'Medicina'
cursos_medicina = tabela[filtro_medicina]

media_mensalidades_medicina = cursos_medicina['mensalidade'].mean()

print("Média das mensalidades dos cursos de Medicina:", media_mensalidades_medicina)

#Exercicio H
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

filtro_tempo_integral = tabela['turno'] == 'Integral'
cursos_tempo_integral = tabela[filtro_tempo_integral]

media_notas_corte_tempo_integral = cursos_tempo_integral[['nota_integral_ampla', 'nota_integral_cotas']].mean()

print("Média das notas de corte dos cursos em tempo integral:")
print(media_notas_corte_tempo_integral)

#Exercicio I
import pandas as pd

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

filtro_bacharelado = tabela['grau'] == 'Bacharelado'
cursos_bacharelado = tabela[filtro_bacharelado]

estatisticas_descritivas = cursos_bacharelado['nota_integral_ampla'].describe()

print("Estatísticas descritivas das notas de corte dos cursos de Bacharelado:")
print(estatisticas_descritivas)

#Exercicio J
import pandas as pd
import matplotlib.pyplot as plt

tabela = pd.read_csv('https://github.com/SergioHenrique31/DatasetProuni/raw/258658d943129d9cb3dbf8f017412866d9cecb61/cursos-prouni.csv')

media_notas_cotas_grau = tabela.groupby('grau')['nota_integral_cotas'].mean()

plt.bar(media_notas_cotas_grau.index, media_notas_cotas_grau)
plt.xlabel('Grau dos Cursos')
plt.ylabel('Média das Notas Integrais de Cotas')
plt.title('Comparação das Notas Integrais de Cotas por Grau dos Cursos')

plt.xticks(rotation=45)

plt.show()
